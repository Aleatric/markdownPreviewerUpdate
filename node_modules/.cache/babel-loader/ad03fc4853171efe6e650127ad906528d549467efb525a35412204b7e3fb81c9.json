{"ast":null,"code":"var _jsxFileName = \"/Users/bradleycronan/Documents/Coding/2023/freeCodeCamp/Front End Dev projects/Markdown Previewer/markdown-previewer/src/App.js\";\nimport React from \"react\";\nimport { marked } from \"marked\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndocument.body.style = 'background: black;';\nconst myComponent = () => {\n  const textStyle = {\n    fontFamily: \"'Courier Prime', monospace\"\n  };\n};\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: `\n# Heading\n\n## Subheading\n\nThis is a [link](https://example.com).\n\nInline code: \\`console.log('Hello, world!')\\`\n\n\\`\\`\\`\n// Code block\nfunction greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\\`\\`\\`\n\n- List item 1\n- List item 2\n\n> This is a blockquote.\n\n![Image](https://example.com/image.jpg)\n\n**This text is bold.**\n\n## Practical Examples\n\n### Creating a Function\n\nTo create a function in JavaScript, you can use the following syntax:\n\n\\`\\`\\`javascript\nfunction functionName(parameter1, parameter2) {\n  // Function body\n  // Do something with the parameters\n  return result;\n}\n\\`\\`\\`\n\n### Styling Text\n\nYou can style text using various Markdown syntax:\n\n- **Bold text**: Wrap the text with double asterisks (\\*\\*).\n- *Italic text*: Wrap the text with single asterisks (\\*).\n- ~~Strikethrough text~~: Wrap the text with double tildes (\\~\\~).\n\n### Creating a List\n\nTo create a list in Markdown, use hyphens (-) or asterisks (\\*) followed by a space:\n\n- List item 1\n- List item 2\n\n### Adding Links\n\nTo add a hyperlink, use the following syntax:\n\n\\[Link Text\\](https://example.com)\n\nReplace \"Link Text\" with the text you want to display and \"https://example.com\" with the actual URL.\n\n### Inserting Images\n\nTo insert an image, use the following syntax:\n\n\\!\\[Alt Text\\](https://example.com/image.jpg)\n\nReplace \"Alt Text\" with the alternative text for the image and \"https://example.com/image.jpg\" with the URL of the image.\n\nThese are just a few practical examples to demonstrate the usage of Markdown. You can explore more Markdown syntax and features to create richly formatted and informative content in your Markdown previewer.\n`\n    };\n  }\n  updateMarkdown(markdown) {\n    this.setState({\n      markdown\n    });\n  }\n  componentDidMount() {\n    const previewElement = document.getElementById(\"preview\");\n    previewElement.innerHTML = marked(this.state.markdown);\n  }\n  componentDidUpdate() {\n    const previewElement = document.getElementById(\"preview\");\n    previewElement.innerHTML = marked(this.state.markdown);\n  }\n  render() {\n    var inputStyle = {\n      width: \"100%\",\n      height: \"600px\",\n      padding: \"1rem\",\n      color: \"#A87D19\",\n      backgroundColor: \"black\",\n      border: \"none\",\n      borderStyle: \"dotted\",\n      overflow: \"auto\"\n    };\n    var outputStyle = {\n      width: \"100%\",\n      height: \"600px\",\n      padding: \"1rem\",\n      backgroundColor: \"black\",\n      borderStyle: \"dotted\",\n      overflow: \"auto\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"black\",\n        fontFamily: \"'Courier Prime', monospace\",\n        color: \"#A87D19\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mt-4\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Markdown Previewer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row mt-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Markdown Input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 140,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                id: \"editor\",\n                className: \"input\",\n                style: inputStyle,\n                value: this.state.markdown,\n                onChange: e => {\n                  this.updateMarkdown(e.target.value);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-6\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"col text-center\",\n                children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Preview\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 156,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                id: \"preview\",\n                style: outputStyle,\n                dangerouslySetInnerHTML: {\n                  __html: marked(this.state.markdown, {\n                    renderer: new Renderer()\n                  })\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","marked","jsxDEV","_jsxDEV","document","body","style","myComponent","textStyle","fontFamily","App","Component","constructor","props","state","markdown","updateMarkdown","setState","componentDidMount","previewElement","getElementById","innerHTML","componentDidUpdate","render","inputStyle","width","height","padding","color","backgroundColor","border","borderStyle","overflow","outputStyle","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","dangerouslySetInnerHTML","__html","renderer","Renderer"],"sources":["/Users/bradleycronan/Documents/Coding/2023/freeCodeCamp/Front End Dev projects/Markdown Previewer/markdown-previewer/src/App.js"],"sourcesContent":["import React from \"react\";\n\nimport {marked} from \"marked\"\n\n\ndocument.body.style = 'background: black;';\nconst myComponent = () => {\n  const textStyle = {\n    fontFamily: \"'Courier Prime', monospace\",\n  };\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: `\n# Heading\n\n## Subheading\n\nThis is a [link](https://example.com).\n\nInline code: \\`console.log('Hello, world!')\\`\n\n\\`\\`\\`\n// Code block\nfunction greet(name) {\n  return \"Hello, \" + name + \"!\";\n}\n\\`\\`\\`\n\n- List item 1\n- List item 2\n\n> This is a blockquote.\n\n![Image](https://example.com/image.jpg)\n\n**This text is bold.**\n\n## Practical Examples\n\n### Creating a Function\n\nTo create a function in JavaScript, you can use the following syntax:\n\n\\`\\`\\`javascript\nfunction functionName(parameter1, parameter2) {\n  // Function body\n  // Do something with the parameters\n  return result;\n}\n\\`\\`\\`\n\n### Styling Text\n\nYou can style text using various Markdown syntax:\n\n- **Bold text**: Wrap the text with double asterisks (\\*\\*).\n- *Italic text*: Wrap the text with single asterisks (\\*).\n- ~~Strikethrough text~~: Wrap the text with double tildes (\\~\\~).\n\n### Creating a List\n\nTo create a list in Markdown, use hyphens (-) or asterisks (\\*) followed by a space:\n\n- List item 1\n- List item 2\n\n### Adding Links\n\nTo add a hyperlink, use the following syntax:\n\n\\[Link Text\\](https://example.com)\n\nReplace \"Link Text\" with the text you want to display and \"https://example.com\" with the actual URL.\n\n### Inserting Images\n\nTo insert an image, use the following syntax:\n\n\\!\\[Alt Text\\](https://example.com/image.jpg)\n\nReplace \"Alt Text\" with the alternative text for the image and \"https://example.com/image.jpg\" with the URL of the image.\n\nThese are just a few practical examples to demonstrate the usage of Markdown. You can explore more Markdown syntax and features to create richly formatted and informative content in your Markdown previewer.\n`,\n    };\n  }\n\n\n  updateMarkdown(markdown) {\n    this.setState({ markdown });\n  }\n\n  componentDidMount() {\n    const previewElement = document.getElementById(\"preview\");\n    previewElement.innerHTML = marked(this.state.markdown);\n  }\n\n  componentDidUpdate() {\n    const previewElement = document.getElementById(\"preview\");\n    previewElement.innerHTML = marked(this.state.markdown);\n  }\n\n  render() {\n    var inputStyle = {\n      width: \"100%\",\n      height: \"600px\",\n      padding: \"1rem\",\n      color: \"#A87D19\",\n      backgroundColor: \"black\",\n      border: \"none\",\n      borderStyle: \"dotted\",\n      overflow: \"auto\",\n    };\n    var outputStyle = {\n      width: \"100%\",\n      height: \"600px\",\n      padding: \"1rem\",\n      backgroundColor: \"black\",\n      borderStyle: \"dotted\",\n      overflow: \"auto\",\n    };\n\n    return (\n      <div style={{backgroundColor: \"black\", fontFamily: \"'Courier Prime', monospace\", color: \"#A87D19\" }}>\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"row mt-4\">\n            <div className=\"col text-center\">\n              <h1>Markdown Previewer</h1>\n            </div>\n          </div>\n\n          <div className=\"row mt-4\">\n            <div className=\"col-md-6\">\n              <div className=\"col text-center\">\n                <h4>Markdown Input</h4>\n              </div>\n                <textarea\n                  id=\"editor\"\n                  className=\"input\"\n                  style={inputStyle}\n                  value={this.state.markdown}\n                  onChange={(e) => {\n                    this.updateMarkdown(e.target.value);\n                  }}\n                />\n              </div>\n\n          \n            <div className=\"col-md-6\">\n              <div className=\"col text-center\">\n                <h4>Preview</h4>\n              </div>\n              <div\n                id=\"preview\"\n                style={outputStyle}\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown, { renderer: new Renderer() }),\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}